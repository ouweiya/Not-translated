!function(e){function t(t){for(var n,c,i=t[0],l=t[1],u=t[2],f=0,d=[];f<i.length;f++)c=i[f],a[c]&&d.push(a[c][0]),a[c]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(s&&s(t);d.length;)d.shift()();return o.push.apply(o,u||[]),r()}function r(){for(var e,t=0;t<o.length;t++){for(var r=o[t],n=!0,i=1;i<r.length;i++){var l=r[i];0!==a[l]&&(n=!1)}n&&(o.splice(t--,1),e=c(c.s=r[0]))}return e}var n={},a={0:0},o=[];function c(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,c),r.l=!0,r.exports}c.m=e,c.c=n,c.d=function(e,t,r){c.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},c.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,t){if(1&t&&(e=c(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(c.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)c.d(r,n,function(t){return e[t]}.bind(null,n));return r},c.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return c.d(t,"a",t),t},c.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},c.p="";var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=t,i=i.slice();for(var u=0;u<i.length;u++)t(i[u]);var s=l;o.push([105,1]),r()}({105:function(e,t,r){"use strict";r.r(t);var n=r(0),a=r.n(n),o=r(9),c=r.n(o),i=(r(91),r(106)),l=r(157),u=r(161),s=r(148),f=r(150),d=r(151),p=r(170),b=r(173);function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function m(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r}function g(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?m(r,!0).forEach(function(t){v(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):m(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function v(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var O,h=a.a.createContext(null),j=function(e,t){switch(t.type){case"data":return g({},e,{data:t.data});case"rows":return g({},e,{rows:t.rows});case"selected":return g({},e,{selected:t.selected});case"domain":return g({},e,{domain:t.domain});case"error":return g({},e,{error:t.error});case"toggle":return g({},e,{toggle:t.toggle});default:return e}},w=(O=null,function(e){clearTimeout(O),O=setTimeout(function(){e()},100)}),E=function(e){var t=y(Object(n.useReducer)(j,{data:{},rows:[],selected:[],domain:"",error:!1,toggle:!1}),2),r=t[0],a=t[1],o={};return Object(n.useEffect)(function(){chrome.runtime.onMessage.addListener(function(e,t){"currentDomain"===e.type&&chrome.storage.sync.get(null,function(t){a({type:"data",data:t}),console.log("获取数据",t),o=t;var r=Object.keys(t).includes(e.currentDomain)?e.currentDomain:Object.keys(t)[0];a({type:"domain",domain:"globalCss"===r?"":r})})}),chrome.runtime.onMessage.addListener(function(e,t){if("sel"===e&&chrome.storage.sync.get(null,function(e){a({type:"data",data:e}),o=e;var r=new URL(t.url).hostname;Object.keys(e).includes(r)&&a({type:"domain",domain:r})}),"current"===e){var r=new URL(t.url).hostname;Object.keys(o).includes(r)&&a({type:"domain",domain:r})}})},[]),Object(n.useEffect)(function(){w(function(){chrome.storage.sync.set(r.data)}),o=r.data},[r]),Object(n.useMemo)(function(t){return Object(n.createElement)(h.Provider,{value:[r,a]},e.children)},[r])};function x(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function P(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var S=[{id:"sty",label:"运用样式"},{id:"def",label:"不运用样式"},{id:"mid",label:"强制翻译"}],A=function(){var e=P(Object(n.useContext)(h),2),t=e[0],r=t.selected,o=t.rows,c=(t.data,e[1]),i=P(Object(n.useState)("asc"),2),l=i[0],u=i[1],y=P(Object(n.useState)("sty"),2),m=y[0],g=y[1],v=r.length,O=o.length,j=function(e){return function(t){return function(e,t){u(m===t&&"desc"===l?"asc":"desc"),g(t),c({type:"rows",rows:x(o).reverse()})}(0,e)}};return a.a.createElement(s.a,null,a.a.createElement(f.a,null,a.a.createElement(d.a,{padding:"checkbox"},a.a.createElement(p.a,{indeterminate:v>0&&v<O,checked:!!O&&v===O,onChange:function(e){if(e.target.checked){var t=o.map(function(e){return e.id});c({type:"selected",selected:t})}else c({type:"selected",selected:[]})}})),S.map(function(e,t){return a.a.createElement(d.a,{key:t,align:"left",sortDirection:m===e.id&&l},a.a.createElement(b.a,{active:m===e.id,direction:l,onClick:j(e.id)},e.label))})))},k=r(172),C=r(154),D=r(71),I=r.n(D),N=r(155),T=r(72),F=r.n(T);function L(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r}function W(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?L(r,!0).forEach(function(t){z(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):L(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function z(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function M(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var R=Object(i.a)(function(e){return{absolute:{position:"fixed",bottom:e.spacing(10),right:e.spacing(5),zIndex:20},spacer:{position:"absolute",top:0,right:20,zIndex:20}}}),B=function(e){var t=R(),r=M(Object(n.useContext)(h),2),a=r[0],o=a.selected,c=a.data,i=a.domain,l=a.rows,u=a.toggle,s=r[1],f=function(e,r,a){return Object(n.createElement)(k.a,{title:e},Object(n.createElement)(C.a,{color:"primary",className:t.absolute,onClick:r},Object(n.createElement)(a)))};return Object(n.createElement)(n.Fragment,null,!u&&(0===o.length?f("Add",function(e){if(l.every(function(e){return e.sty||e.def||e.mid})){var t=(r=void 0,n=void 0,a=void 0,o=Date.now(),{sty:r,def:n,mid:a,id:o});s({type:"rows",rows:l.concat(t)})}var r,n,a,o},I.a):f("Delete",function(e){var t=l.filter(function(e){return!o.includes(e.id)}),r=["sty","def","mid"].reduce(function(e,r){return W({},e,z({},r,t.reduce(function(e,t){return t[r]?e.concat(t[r]):e},[])))},{});r=W({},c[i],{},r);var n=W({},c,z({},i,r));s({type:"data",data:n})},F.a)),Object(n.createElement)(N.a,{color:"primary",checked:u,onChange:function(e){s({type:"toggle",toggle:!u}),s({type:"selected",selected:[]})},value:!0,className:t.spacer}))},_=r(159),G=r(57),J=r(168);function U(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r}function X(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?U(r,!0).forEach(function(t){q(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):U(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function q(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function H(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function K(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Q=Object(i.a)(function(e){return{root:{"& > div::before":{borderBottomColor:"#00000000"}}}}),V=function(e){var t=e.row,r=e.field,o=Q(),c=K(Object(n.useContext)(h),2),i=c[0],l=i.rows,u=i.domain,s=i.data,f=i.error,d=c[1],p=K(Object(n.useState)(!1),2),b=p[0],y=p[1],m=K(Object(n.useState)(""),2),g=m[0],v=m[1];Object(n.useEffect)(function(){y(!1),v("")},[s]);return a.a.createElement(J.a,{value:void 0===t[r]?"":t[r],onChange:function(e){if(u){var n=e.target.value;isNaN(parseFloat(n))?l.map(function(e){return e[r]}).includes(n)&&n?(y(!0),v("重复选择器")):(y(!1),v("")):(y(!0),v("选择器不能是数字")),d({type:"error",error:n});var a=X({},t,q({},r,n)),o=l.map(function(e){return e===t?a:e});d({type:"rows",rows:o})}},classes:{root:o.root},onClick:function(e){return e.stopPropagation()},onBlur:function(e){var t=["sty","def","mid"].reduce(function(e,t){return X({},e,q({},t,function(e){return H(new Set(l.reduce(function(t,r){return r[e]&&isNaN(parseFloat(r[e]))?t.concat(r[e]):t},[])))}(t)))},{});t=X({},s[u],{},t);var r=X({},s,q({},u,t));d({type:"data",data:r})},label:g,error:!(f!==t[r]||!f||!b),fullWidth:!0})},Y=function(e){return Object(n.useMemo)(function(){return a.a.createElement(V,e)},[e.row])};function Z(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r}function $(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ee(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function te(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var re=function(e){var t=te(Object(n.useContext)(h),2),r=t[0],o=r.data,c=r.selected,i=r.rows,l=r.domain,u=t[1];Object(n.useEffect)(function(){var e=Object.keys(o).filter(function(e){return"globalCss"!==e});if(1===e.length&&u({type:"domain",domain:"".concat(e)}),o[l]){var t=o[l],r=t.sty,n=t.def,a=t.mid,c=[r,n,a].reduce(function(e,t){return t.length>e?t.length:e},0),i=ee(Array(c)).map(function(e,t){return function(e,t,r,n){return{sty:e,def:t,mid:r,id:n}}(r[t]||"",n[t]||"",a[t]||"",t)});if(u({type:"rows",rows:i}),!i.length){var s=Object.keys(o).filter(function(e){return"globalCss"!==e}),f=s.indexOf(l)+1,d=s[f];u({type:"domain",domain:d});var p=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Z(r,!0).forEach(function(t){$(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Z(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({},o);delete p[l],u({type:"data",data:p}),chrome.storage.sync.remove(l)}}return function(){u({type:"selected",selected:[]})}},[o,l]);return a.a.createElement(_.a,null,i.length?i.map(function(e,t){return a.a.createElement(f.a,{hover:!0,onClick:function(t){return r=e.id,void(c.includes(r)?u({type:"selected",selected:c.filter(function(e){return e!==r})}):u({type:"selected",selected:c.concat(r)}));var r},key:t,selected:c.includes(e.id)},a.a.createElement(d.a,{padding:"checkbox"},a.a.createElement(p.a,{checked:c.includes(e.id)})),a.a.createElement(d.a,{scope:"row"},a.a.createElement(Y,{row:e,field:"sty"})),a.a.createElement(d.a,{align:"left"},a.a.createElement(Y,{row:e,field:"def"})),a.a.createElement(d.a,{align:"left"},a.a.createElement(Y,{row:e,field:"mid"})))}):a.a.createElement(f.a,null,a.a.createElement(d.a,{colSpan:4},a.a.createElement(G.a,{align:"center",variant:"subtitle2",color:"textSecondary"},"没有数据"))))},ne=r(160);function ae(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r}function oe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ae(r,!0).forEach(function(t){ce(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ae(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function ce(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ie(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var le=Object(i.a)(function(e){return{container:{display:"flex",flexWrap:"wrap",maxWidth:960,margin:"auto"},textField:{margin:e.spacing(4,1),"& textarea":{fontFamily:"Fira Code Regular",fontSize:"14px"}},last:{marginBottom:e.spacing(8)}}});function ue(){var e=le(),t=ie(Object(n.useContext)(h),2),r=t[0],o=r.data,c=r.domain,i=t[1],l="";return o[c]&&(l=o[c].css||""),a.a.createElement(ne.a,{maxWidth:"md"},a.a.createElement(J.a,{label:c||"未选择",multiline:!0,rows:"8",className:e.textField,margin:"normal",variant:"outlined",fullWidth:!0,onChange:function(e){if(c){var t=e.target.value,r=oe({},o[c],{css:t}),n=oe({},o,ce({},c,r));i({type:"data",data:n})}},id:"text",value:l,placeholder:"默认运用全局",InputLabelProps:{shrink:!0}}),a.a.createElement(J.a,{label:"全局",multiline:!0,rows:"8",className:"".concat(e.textField," ").concat(e.last),margin:"normal",variant:"outlined",fullWidth:!0,value:o.globalCss,onChange:function(e){var t=e.target.value,r=oe({},o,{globalCss:t});i({type:"data",data:r})},id:"text",InputLabelProps:{shrink:!0}}))}function se(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var fe=Object(i.a)(function(e){return{absolute:{position:"fixed",bottom:e.spacing(10),right:e.spacing(5),zIndex:20},spacer:{position:"absolute",top:0,right:20,zIndex:20}}});Object(i.a)(function(e){return{root:{width:"100%"},paper:{width:"100%",marginBottom:e.spacing(2)},table:{minWidth:750},tableWrapper:{overflowX:"auto"}}});function de(){var e=fe(),t=se(Object(n.useContext)(h),2),r=t[0].toggle;t[1];return Object(n.createElement)(l.a,{className:e.paper},Object(n.createElement)(B),r?Object(n.createElement)(ue):Object(n.createElement)("div",{className:e.tableWrapper},Object(n.createElement)(u.a,{className:e.table,size:"medium"},Object(n.createElement)(A),Object(n.createElement)(re))))}var pe=r(169),be=r(163),ye=r(158),me=r(164),ge=r(165),ve=r(73),Oe=r.n(ve),he=r(156),je=r(162),we=Object(i.a)(function(e){return{root:{flexGrow:1},search:{position:"relative"},searchIcon:{width:e.spacing(3.5),height:"100%",position:"absolute",pointerEvents:"none",display:"flex",alignItems:"center",justifyContent:"center"},inputRoot:{color:"inherit"},inputInput:{padding:e.spacing(1,1,1,5),width:"100%"},input:{margin:e.spacing(1)}}});function Ee(e){var t=e.setFilter,r=we();return a.a.createElement(je.a,{className:r.root},a.a.createElement("div",{className:r.search},a.a.createElement("div",{className:r.searchIcon},a.a.createElement(Oe.a,null)),a.a.createElement(he.a,{placeholder:"Search…",classes:{root:r.inputRoot,input:r.inputInput},onChange:function(e){return t(e.target.value.trim())}})))}function xe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Pe=Object(i.a)(function(e){return{drawer:{width:300,flexShrink:0,overflow:"hidden"},drawerPaper:{width:300},toolbar:e.mixins.toolbar,box:{background:"#fff",boxSizing:"border-box",position:"fixed",zIndex:10,width:295,transition:"box-shadow 0.3s ease-in-out"},shadow:{boxShadow:"0px 2px 4px -1px #00000033, 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)"},txt:{paddingLeft:8}}}),Se=function(e){var t=Pe(),r=Object(n.useRef)(null),a=xe(Object(n.useState)(""),2),o=a[0],c=a[1],i=xe(Object(n.useContext)(h),2),l=i[0],u=l.data,s=l.domain,f=i[1],d=Object(n.createElement)("div",{className:t.box,ref:r},Object(n.createElement)(Ee,{setFilter:c}),Object(n.createElement)(be.a)),p=Object.keys(u).filter(function(e){return"globalCss"!==e}).filter(function(e){return e.includes(o)}).map(function(e,r){return Object(n.createElement)(me.a,{button:!0,key:r,onClick:function(t){return f({type:"domain",domain:e})},selected:s===e},Object(n.createElement)(ge.a,{primary:e,className:t.txt}))}),b=Object(n.createElement)(ye.a,null,p),y={className:t.drawer,variant:"permanent",classes:{paper:t.drawerPaper},anchor:"left",onScroll:function(e){e.target.scrollTop>30&&r.current.classList.add(t.shadow),e.target.scrollTop<30&&r.current.classList.remove(t.shadow)}};return Object(n.createElement)(pe.a,y,d,Object(n.createElement)("div",{className:t.toolbar}),b)};function Ae(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(n=(c=i.next()).done)&&(r.push(c.value),!t||r.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==i.return||i.return()}finally{if(a)throw o}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var ke=Object(i.a)(function(e){return{root:{display:"flex"},appBar:{width:"calc(100% - ".concat(300,"px)"),marginLeft:300},content:{flexGrow:1,backgroundColor:e.palette.background.default}}});function Ce(){var e=ke(),t=Ae(Object(n.useState)({}),2),r=t[0];t[1];return a.a.createElement("div",{className:e.root},a.a.createElement(Se,null),a.a.createElement("main",{className:e.content},a.a.createElement(de,r)))}var De=r(167),Ie=r(166),Ne=r(74),Te=r(38),Fe=r.n(Te),Le=Object(Ne.a)({palette:{primary:Fe.a,secondary:Fe.a}}),We=Object(Ne.a)({palette:{primary:Fe.a}});c.a.render(a.a.createElement(Ie.a,{theme:We},a.a.createElement(De.a,null),a.a.createElement(function(){return Object(n.createElement)(Ie.a,{theme:Le},Object(n.createElement)(De.a),Object(n.createElement)(E,null,Object(n.createElement)(Ce)))},null)),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,